/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package twitter;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class PlaceDetails extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6595707558197323764L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PlaceDetails\",\"namespace\":\"twitter\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"url\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"place_type\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"name\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"full_name\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"country_code\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"country\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"bounding_box\",\"type\":{\"type\":\"record\",\"name\":\"BoundingBox\",\"fields\":[{\"name\":\"type\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"coordinates\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":\"float\"}}}}]}},{\"name\":\"attributes\",\"type\":{\"type\":\"record\",\"name\":\"AttributesDetails\",\"fields\":[]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence id;
  @Deprecated public java.lang.CharSequence url;
  @Deprecated public java.lang.CharSequence place_type;
  @Deprecated public java.lang.CharSequence name;
  @Deprecated public java.lang.CharSequence full_name;
  @Deprecated public java.lang.CharSequence country_code;
  @Deprecated public java.lang.CharSequence country;
  @Deprecated public twitter.BoundingBox bounding_box;
  @Deprecated public twitter.AttributesDetails attributes;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PlaceDetails() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param url The new value for url
   * @param place_type The new value for place_type
   * @param name The new value for name
   * @param full_name The new value for full_name
   * @param country_code The new value for country_code
   * @param country The new value for country
   * @param bounding_box The new value for bounding_box
   * @param attributes The new value for attributes
   */
  public PlaceDetails(java.lang.CharSequence id, java.lang.CharSequence url, java.lang.CharSequence place_type, java.lang.CharSequence name, java.lang.CharSequence full_name, java.lang.CharSequence country_code, java.lang.CharSequence country, twitter.BoundingBox bounding_box, twitter.AttributesDetails attributes) {
    this.id = id;
    this.url = url;
    this.place_type = place_type;
    this.name = name;
    this.full_name = full_name;
    this.country_code = country_code;
    this.country = country;
    this.bounding_box = bounding_box;
    this.attributes = attributes;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return url;
    case 2: return place_type;
    case 3: return name;
    case 4: return full_name;
    case 5: return country_code;
    case 6: return country;
    case 7: return bounding_box;
    case 8: return attributes;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: url = (java.lang.CharSequence)value$; break;
    case 2: place_type = (java.lang.CharSequence)value$; break;
    case 3: name = (java.lang.CharSequence)value$; break;
    case 4: full_name = (java.lang.CharSequence)value$; break;
    case 5: country_code = (java.lang.CharSequence)value$; break;
    case 6: country = (java.lang.CharSequence)value$; break;
    case 7: bounding_box = (twitter.BoundingBox)value$; break;
    case 8: attributes = (twitter.AttributesDetails)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'url' field.
   * @return The value of the 'url' field.
   */
  public java.lang.CharSequence getUrl() {
    return url;
  }

  /**
   * Sets the value of the 'url' field.
   * @param value the value to set.
   */
  public void setUrl(java.lang.CharSequence value) {
    this.url = value;
  }

  /**
   * Gets the value of the 'place_type' field.
   * @return The value of the 'place_type' field.
   */
  public java.lang.CharSequence getPlaceType() {
    return place_type;
  }

  /**
   * Sets the value of the 'place_type' field.
   * @param value the value to set.
   */
  public void setPlaceType(java.lang.CharSequence value) {
    this.place_type = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'full_name' field.
   * @return The value of the 'full_name' field.
   */
  public java.lang.CharSequence getFullName() {
    return full_name;
  }

  /**
   * Sets the value of the 'full_name' field.
   * @param value the value to set.
   */
  public void setFullName(java.lang.CharSequence value) {
    this.full_name = value;
  }

  /**
   * Gets the value of the 'country_code' field.
   * @return The value of the 'country_code' field.
   */
  public java.lang.CharSequence getCountryCode() {
    return country_code;
  }

  /**
   * Sets the value of the 'country_code' field.
   * @param value the value to set.
   */
  public void setCountryCode(java.lang.CharSequence value) {
    this.country_code = value;
  }

  /**
   * Gets the value of the 'country' field.
   * @return The value of the 'country' field.
   */
  public java.lang.CharSequence getCountry() {
    return country;
  }

  /**
   * Sets the value of the 'country' field.
   * @param value the value to set.
   */
  public void setCountry(java.lang.CharSequence value) {
    this.country = value;
  }

  /**
   * Gets the value of the 'bounding_box' field.
   * @return The value of the 'bounding_box' field.
   */
  public twitter.BoundingBox getBoundingBox() {
    return bounding_box;
  }

  /**
   * Sets the value of the 'bounding_box' field.
   * @param value the value to set.
   */
  public void setBoundingBox(twitter.BoundingBox value) {
    this.bounding_box = value;
  }

  /**
   * Gets the value of the 'attributes' field.
   * @return The value of the 'attributes' field.
   */
  public twitter.AttributesDetails getAttributes() {
    return attributes;
  }

  /**
   * Sets the value of the 'attributes' field.
   * @param value the value to set.
   */
  public void setAttributes(twitter.AttributesDetails value) {
    this.attributes = value;
  }

  /**
   * Creates a new PlaceDetails RecordBuilder.
   * @return A new PlaceDetails RecordBuilder
   */
  public static twitter.PlaceDetails.Builder newBuilder() {
    return new twitter.PlaceDetails.Builder();
  }

  /**
   * Creates a new PlaceDetails RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PlaceDetails RecordBuilder
   */
  public static twitter.PlaceDetails.Builder newBuilder(twitter.PlaceDetails.Builder other) {
    return new twitter.PlaceDetails.Builder(other);
  }

  /**
   * Creates a new PlaceDetails RecordBuilder by copying an existing PlaceDetails instance.
   * @param other The existing instance to copy.
   * @return A new PlaceDetails RecordBuilder
   */
  public static twitter.PlaceDetails.Builder newBuilder(twitter.PlaceDetails other) {
    return new twitter.PlaceDetails.Builder(other);
  }

  /**
   * RecordBuilder for PlaceDetails instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PlaceDetails>
    implements org.apache.avro.data.RecordBuilder<PlaceDetails> {

    private java.lang.CharSequence id;
    private java.lang.CharSequence url;
    private java.lang.CharSequence place_type;
    private java.lang.CharSequence name;
    private java.lang.CharSequence full_name;
    private java.lang.CharSequence country_code;
    private java.lang.CharSequence country;
    private twitter.BoundingBox bounding_box;
    private twitter.BoundingBox.Builder bounding_boxBuilder;
    private twitter.AttributesDetails attributes;
    private twitter.AttributesDetails.Builder attributesBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(twitter.PlaceDetails.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.url)) {
        this.url = data().deepCopy(fields()[1].schema(), other.url);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.place_type)) {
        this.place_type = data().deepCopy(fields()[2].schema(), other.place_type);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.name)) {
        this.name = data().deepCopy(fields()[3].schema(), other.name);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.full_name)) {
        this.full_name = data().deepCopy(fields()[4].schema(), other.full_name);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.country_code)) {
        this.country_code = data().deepCopy(fields()[5].schema(), other.country_code);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.country)) {
        this.country = data().deepCopy(fields()[6].schema(), other.country);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.bounding_box)) {
        this.bounding_box = data().deepCopy(fields()[7].schema(), other.bounding_box);
        fieldSetFlags()[7] = true;
      }
      if (other.hasBoundingBoxBuilder()) {
        this.bounding_boxBuilder = twitter.BoundingBox.newBuilder(other.getBoundingBoxBuilder());
      }
      if (isValidValue(fields()[8], other.attributes)) {
        this.attributes = data().deepCopy(fields()[8].schema(), other.attributes);
        fieldSetFlags()[8] = true;
      }
      if (other.hasAttributesBuilder()) {
        this.attributesBuilder = twitter.AttributesDetails.newBuilder(other.getAttributesBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing PlaceDetails instance
     * @param other The existing instance to copy.
     */
    private Builder(twitter.PlaceDetails other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.url)) {
        this.url = data().deepCopy(fields()[1].schema(), other.url);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.place_type)) {
        this.place_type = data().deepCopy(fields()[2].schema(), other.place_type);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.name)) {
        this.name = data().deepCopy(fields()[3].schema(), other.name);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.full_name)) {
        this.full_name = data().deepCopy(fields()[4].schema(), other.full_name);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.country_code)) {
        this.country_code = data().deepCopy(fields()[5].schema(), other.country_code);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.country)) {
        this.country = data().deepCopy(fields()[6].schema(), other.country);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.bounding_box)) {
        this.bounding_box = data().deepCopy(fields()[7].schema(), other.bounding_box);
        fieldSetFlags()[7] = true;
      }
      this.bounding_boxBuilder = null;
      if (isValidValue(fields()[8], other.attributes)) {
        this.attributes = data().deepCopy(fields()[8].schema(), other.attributes);
        fieldSetFlags()[8] = true;
      }
      this.attributesBuilder = null;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public twitter.PlaceDetails.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public twitter.PlaceDetails.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'url' field.
      * @return The value.
      */
    public java.lang.CharSequence getUrl() {
      return url;
    }

    /**
      * Sets the value of the 'url' field.
      * @param value The value of 'url'.
      * @return This builder.
      */
    public twitter.PlaceDetails.Builder setUrl(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.url = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'url' field has been set.
      * @return True if the 'url' field has been set, false otherwise.
      */
    public boolean hasUrl() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'url' field.
      * @return This builder.
      */
    public twitter.PlaceDetails.Builder clearUrl() {
      url = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'place_type' field.
      * @return The value.
      */
    public java.lang.CharSequence getPlaceType() {
      return place_type;
    }

    /**
      * Sets the value of the 'place_type' field.
      * @param value The value of 'place_type'.
      * @return This builder.
      */
    public twitter.PlaceDetails.Builder setPlaceType(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.place_type = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'place_type' field has been set.
      * @return True if the 'place_type' field has been set, false otherwise.
      */
    public boolean hasPlaceType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'place_type' field.
      * @return This builder.
      */
    public twitter.PlaceDetails.Builder clearPlaceType() {
      place_type = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public twitter.PlaceDetails.Builder setName(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.name = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public twitter.PlaceDetails.Builder clearName() {
      name = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'full_name' field.
      * @return The value.
      */
    public java.lang.CharSequence getFullName() {
      return full_name;
    }

    /**
      * Sets the value of the 'full_name' field.
      * @param value The value of 'full_name'.
      * @return This builder.
      */
    public twitter.PlaceDetails.Builder setFullName(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.full_name = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'full_name' field has been set.
      * @return True if the 'full_name' field has been set, false otherwise.
      */
    public boolean hasFullName() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'full_name' field.
      * @return This builder.
      */
    public twitter.PlaceDetails.Builder clearFullName() {
      full_name = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'country_code' field.
      * @return The value.
      */
    public java.lang.CharSequence getCountryCode() {
      return country_code;
    }

    /**
      * Sets the value of the 'country_code' field.
      * @param value The value of 'country_code'.
      * @return This builder.
      */
    public twitter.PlaceDetails.Builder setCountryCode(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.country_code = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'country_code' field has been set.
      * @return True if the 'country_code' field has been set, false otherwise.
      */
    public boolean hasCountryCode() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'country_code' field.
      * @return This builder.
      */
    public twitter.PlaceDetails.Builder clearCountryCode() {
      country_code = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'country' field.
      * @return The value.
      */
    public java.lang.CharSequence getCountry() {
      return country;
    }

    /**
      * Sets the value of the 'country' field.
      * @param value The value of 'country'.
      * @return This builder.
      */
    public twitter.PlaceDetails.Builder setCountry(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.country = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'country' field has been set.
      * @return True if the 'country' field has been set, false otherwise.
      */
    public boolean hasCountry() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'country' field.
      * @return This builder.
      */
    public twitter.PlaceDetails.Builder clearCountry() {
      country = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'bounding_box' field.
      * @return The value.
      */
    public twitter.BoundingBox getBoundingBox() {
      return bounding_box;
    }

    /**
      * Sets the value of the 'bounding_box' field.
      * @param value The value of 'bounding_box'.
      * @return This builder.
      */
    public twitter.PlaceDetails.Builder setBoundingBox(twitter.BoundingBox value) {
      validate(fields()[7], value);
      this.bounding_boxBuilder = null;
      this.bounding_box = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'bounding_box' field has been set.
      * @return True if the 'bounding_box' field has been set, false otherwise.
      */
    public boolean hasBoundingBox() {
      return fieldSetFlags()[7];
    }

    /**
     * Gets the Builder instance for the 'bounding_box' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public twitter.BoundingBox.Builder getBoundingBoxBuilder() {
      if (bounding_boxBuilder == null) {
        if (hasBoundingBox()) {
          setBoundingBoxBuilder(twitter.BoundingBox.newBuilder(bounding_box));
        } else {
          setBoundingBoxBuilder(twitter.BoundingBox.newBuilder());
        }
      }
      return bounding_boxBuilder;
    }

    /**
     * Sets the Builder instance for the 'bounding_box' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public twitter.PlaceDetails.Builder setBoundingBoxBuilder(twitter.BoundingBox.Builder value) {
      clearBoundingBox();
      bounding_boxBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'bounding_box' field has an active Builder instance
     * @return True if the 'bounding_box' field has an active Builder instance
     */
    public boolean hasBoundingBoxBuilder() {
      return bounding_boxBuilder != null;
    }

    /**
      * Clears the value of the 'bounding_box' field.
      * @return This builder.
      */
    public twitter.PlaceDetails.Builder clearBoundingBox() {
      bounding_box = null;
      bounding_boxBuilder = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'attributes' field.
      * @return The value.
      */
    public twitter.AttributesDetails getAttributes() {
      return attributes;
    }

    /**
      * Sets the value of the 'attributes' field.
      * @param value The value of 'attributes'.
      * @return This builder.
      */
    public twitter.PlaceDetails.Builder setAttributes(twitter.AttributesDetails value) {
      validate(fields()[8], value);
      this.attributesBuilder = null;
      this.attributes = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'attributes' field has been set.
      * @return True if the 'attributes' field has been set, false otherwise.
      */
    public boolean hasAttributes() {
      return fieldSetFlags()[8];
    }

    /**
     * Gets the Builder instance for the 'attributes' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public twitter.AttributesDetails.Builder getAttributesBuilder() {
      if (attributesBuilder == null) {
        if (hasAttributes()) {
          setAttributesBuilder(twitter.AttributesDetails.newBuilder(attributes));
        } else {
          setAttributesBuilder(twitter.AttributesDetails.newBuilder());
        }
      }
      return attributesBuilder;
    }

    /**
     * Sets the Builder instance for the 'attributes' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public twitter.PlaceDetails.Builder setAttributesBuilder(twitter.AttributesDetails.Builder value) {
      clearAttributes();
      attributesBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'attributes' field has an active Builder instance
     * @return True if the 'attributes' field has an active Builder instance
     */
    public boolean hasAttributesBuilder() {
      return attributesBuilder != null;
    }

    /**
      * Clears the value of the 'attributes' field.
      * @return This builder.
      */
    public twitter.PlaceDetails.Builder clearAttributes() {
      attributes = null;
      attributesBuilder = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    public PlaceDetails build() {
      try {
        PlaceDetails record = new PlaceDetails();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.url = fieldSetFlags()[1] ? this.url : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.place_type = fieldSetFlags()[2] ? this.place_type : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.name = fieldSetFlags()[3] ? this.name : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.full_name = fieldSetFlags()[4] ? this.full_name : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.country_code = fieldSetFlags()[5] ? this.country_code : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.country = fieldSetFlags()[6] ? this.country : (java.lang.CharSequence) defaultValue(fields()[6]);
        if (bounding_boxBuilder != null) {
          record.bounding_box = this.bounding_boxBuilder.build();
        } else {
          record.bounding_box = fieldSetFlags()[7] ? this.bounding_box : (twitter.BoundingBox) defaultValue(fields()[7]);
        }
        if (attributesBuilder != null) {
          record.attributes = this.attributesBuilder.build();
        } else {
          record.attributes = fieldSetFlags()[8] ? this.attributes : (twitter.AttributesDetails) defaultValue(fields()[8]);
        }
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
